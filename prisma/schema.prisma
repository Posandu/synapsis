generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id
  username          String    @unique
  password_hash     String
  createdAt         DateTime  @default(now())
  lastOverviewGiven DateTime?
  introGivenItems   String[]

  sessions        Session[]
  notes           Note[]
  categories      Category[]
  userPoints      UserXP[]
  practiceHistory PracticeHistory[]
  quizzes         Quiz[]
  flashCards      FlashCard[]
  chat            Chat[]
}

model Category {
  id     String @id @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  notes Note[]
}

model Note {
  id         String   @id @default(uuid())
  title      String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  categoryId String
  userId     String

  category  Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz?
  flashCard FlashCard?
}

model Quiz {
  id     String @id @default(uuid())
  title  String
  data   Json
  userId String
  noteID String @unique
  points Int

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  practiceHistory PracticeHistory[]
  note            Note              @relation(fields: [noteID], references: [id], onDelete: Cascade)
}

model FlashCard {
  id     String @id @default(uuid())
  data   Json
  title  String
  userId String
  noteID String @unique

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  practiceHistory PracticeHistory[]
  note            Note              @relation(fields: [noteID], references: [id], onDelete: Cascade)
}

model UserXP {
  userId String
  points Int
  date   DateTime @default(now()) @db.Date

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model PracticeHistory {
  id          String   @id @default(uuid())
  userId      String
  date        DateTime @default(now())
  quizId      String?
  flashCardId String?
  points      Int?

  quiz      Quiz?      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  flashCard FlashCard? @relation(fields: [flashCardId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Chat {
  id        String   @id @default(uuid())
  userId    String
  data      Json
  title     String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}
